# frozen_string_literal: true
require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe TasksController, type: :controller do
  # This should return the minimal set of attributes required to create a valid
  # Task. As you add validations to Task, be sure to
  # adjust the attributes here as well.
  let(:committee) { create(:committee) }
  let(:trial) { create(:trial, committee: committee) }
  let(:task) { create(:task, trial: trial) }

  let(:invalid_attributes) { attributes_for(:task, content: nil) }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # TasksController. Be sure to keep this updated too.
  let(:valid_session) do
    { user_id: { 'uid' => create(:user).uid,
                 'extra' => { 'permissions' => { 'zaki' => { 'committee' => [committee.id] } },
                              'is_admin' => true },
                 'credentials' => { 'expires_at' => 1.hour.from_now.to_i } } }
  end

  describe 'GET #edit' do
    before { Trial.skip_callback(:create, :after, :create_drive_folder) }
    it 'assigns the requested task as @task' do
      get :edit, params: { committee_id: committee.id, trial_id: trial.id,
                           id: task.to_param }, session: valid_session
      expect(assigns(:task)).to eq(task)
    end
  end

  describe 'POST #create' do
    context 'with valid params' do
      it 'creates a new Task' do
        expect do
          post :create, params: { committee_id: committee.id, trial_id: trial.id,
                                  task: attributes_for(:task) },
                        session: valid_session
        end.to change(Task, :count).by(1)
      end

      it 'assigns a newly created task as @task' do
        post :create, params: { committee_id: committee.id, trial_id: trial.id,
                                task: attributes_for(:task) },
                      session: valid_session
        expect(assigns(:task)).to be_a(Task)
        expect(assigns(:task)).to be_persisted
      end

      it 'redirects to the trial show' do
        post :create, params: { committee_id: committee.id, trial_id: trial.id,
                                task: attributes_for(:task) }, session: valid_session
        expect(response).to redirect_to([committee, trial])
      end
    end

    context 'with invalid params' do
      it 'assigns a newly created but unsaved task as @task' do
        post :create, params: { committee_id: committee.id, trial_id: trial.id,
                                task: invalid_attributes }, session: valid_session
        expect(assigns(:task)).to be_a_new(Task)
      end

      it 'redirects to the trial show on error' do
        post :create, params: { committee_id: committee.id, trial_id: trial.id,
                                task: invalid_attributes }, session: valid_session
        expect(response).to redirect_to([committee, trial])
      end
    end
  end

  describe 'PUT #update' do
    context 'with valid params' do
      let(:new_attributes) do
        attributes_for(:task)
      end

      it 'updates the requested task' do
        put :update, params: { committee_id: committee.id, trial_id: trial.id,
                               id: task.to_param, task: new_attributes }, session: valid_session
        task.reload
        expect(task.content).to eq(new_attributes[:content])
      end

      it 'assigns the requested task as @task' do
        put :update, params: { committee_id: committee.id, trial_id: trial.id,
                               id: task.to_param, task: attributes_for(:task) },
                     session: valid_session
        expect(assigns(:task)).to eq(task)
      end

      it 'redirects to the task' do
        put :update, params: { committee_id: committee.id, trial_id: trial.id,
                               id: task.to_param, task: attributes_for(:task) },
                     session: valid_session
        expect(response).to redirect_to([committee, trial])
      end
    end

    context 'with invalid params' do
      it 'assigns the task as @task' do
        put :update, params: { committee_id: committee.id, trial_id: trial.id,
                               id: task.to_param, task: invalid_attributes }, session: valid_session
        expect(assigns(:task)).to eq(task)
      end

      it 'redirects to the task on error' do
        put :update, params: { committee_id: committee.id, trial_id: trial.id,
                               id: task.to_param, task: invalid_attributes }, session: valid_session
        expect(response).to redirect_to([committee, trial])
      end
    end
  end

  describe 'DELETE #destroy' do
    before { create(:task, trial: trial) }
    let(:task) { Task.last }

    it 'destroys the requested task' do
      expect do
        delete :destroy, params: { committee_id: committee.id, trial_id: trial.id,
                                   id: task.to_param }, session: valid_session
      end.to change(Task, :count).by(-1)
    end

    it 'redirects to the trial show' do
      delete :destroy, params: { committee_id: committee.id, trial_id: trial.id,
                                 id: task.to_param }, session: valid_session
      expect(response).to redirect_to([committee, trial])
    end
  end
end
