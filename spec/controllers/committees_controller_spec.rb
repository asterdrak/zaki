# frozen_string_literal: true
require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe CommitteesController, type: :controller do
  # This should return the minimal set of attributes required to create a valid
  # Committee. As you add validations to Committee, be sure to
  # adjust the attributes here as well.
  let(:committee) { create(:committee) }

  let(:invalid_attributes) { attributes_for(:committee, name: nil) }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # CommitteesController. Be sure to keep this updated too.
  let(:valid_session) do
    { user_id: { 'uid' => create(:user).uid, 'extra' => {},
                 'credentials' => { 'expires_at' => 1.hour.from_now.to_i } } }
  end

  before do
    allow(committee).to receive_message_chain('stateman.organization.stateman_states') { [] }
  end

  describe 'GET #index' do
    it 'assigns all committees as @committees' do
      get :index, params: {}, session: valid_session
      expect(assigns(:committees)).to eq([committee])
    end
  end

  describe 'GET #show' do
    before do
      allow(StatemanTrial).to receive(:get)
    end

    it 'assigns the requested committee as @committee' do
      get :show, params: { id: committee.to_param }, session: valid_session
      expect(assigns(:committee)).to eq(committee)
    end
  end

  describe 'GET #new' do
    it 'assigns a new committee as @committee' do
      get :new, params: {}, session: valid_session
      expect(assigns(:committee)).to be_a_new(Committee)
    end
  end

  describe 'GET #edit' do
    it 'assigns the requested committee as @committee' do
      get :edit, params: { id: committee.to_param }, session: valid_session
      expect(assigns(:committee)).to eq(committee)
    end
  end

  describe 'POST #create' do
    context 'with valid params' do
      it 'creates a new Committee' do
        expect do
          post :create, params: { committee: attributes_for(:committee) }, session: valid_session
        end.to change(Committee, :count).by(1)
      end

      it 'assigns a newly created committee as @committee' do
        post :create, params: { committee: attributes_for(:committee) }, session: valid_session
        expect(assigns(:committee)).to be_a(Committee)
        expect(assigns(:committee)).to be_persisted
      end

      it 'redirects to the created committee' do
        post :create, params: { committee: attributes_for(:committee) }, session: valid_session
        expect(response).to redirect_to(Committee.last)
      end
    end

    context 'with invalid params' do
      it 'assigns a newly created but unsaved committee as @committee' do
        post :create, params: { committee: invalid_attributes }, session: valid_session
        expect(assigns(:committee)).to be_a_new(Committee)
      end

      it "re-renders the 'new' template" do
        post :create, params: { committee: invalid_attributes }, session: valid_session
        expect(response).to render_template('new')
      end
    end
  end

  describe 'PUT #update' do
    context 'with valid params' do
      let(:new_attributes) do
        attributes_for(:committee)
      end

      it 'updates the requested committee' do
        put :update, params: { id: committee.to_param, committee: new_attributes },
                     session: valid_session
        committee.reload
        expect(committee.name).to eq(new_attributes[:name])
      end

      it 'assigns the requested committee as @committee' do
        put :update, params: { id: committee.to_param, committee: attributes_for(:committee) },
                     session: valid_session
        expect(assigns(:committee)).to eq(committee)
      end

      it 'redirects to the committee' do
        put :update, params: { id: committee.to_param, committee: attributes_for(:committee) },
                     session: valid_session
        expect(response).to redirect_to(committee)
      end
    end

    context 'with invalid params' do
      it 'assigns the committee as @committee' do
        put :update, params: { id: committee.to_param, committee: invalid_attributes },
                     session: valid_session
        expect(assigns(:committee)).to eq(committee)
      end

      it "re-renders the 'edit' template" do
        put :update, params: { id: committee.to_param, committee: invalid_attributes },
                     session: valid_session
        expect(response).to render_template('edit')
      end
    end
  end

  describe 'DELETE #destroy' do
    before(:each) { create(:committee) }

    it 'destroys the requested committee' do
      expect do
        delete :destroy, params: { id: Committee.last.to_param }, session: valid_session
      end.to change(Committee, :count).by(-1)
    end

    it 'redirects to the committees list' do
      delete :destroy, params: { id: Committee.last.to_param }, session: valid_session
      expect(response).to redirect_to(committees_url)
    end
  end
end
